// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// declusterCpp
int declusterCpp(NumericVector complete_series, NumericVector y, double series_mean);
RcppExport SEXP potMax_declusterCpp(SEXP complete_seriesSEXP, SEXP ySEXP, SEXP series_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type complete_series(complete_seriesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type series_mean(series_meanSEXP);
    __result = Rcpp::wrap(declusterCpp(complete_series, y, series_mean));
    return __result;
END_RCPP
}
// declusterWithTimeCpp
int declusterWithTimeCpp(NumericVector complete_series, NumericVector obs_times, NumericVector y, NumericVector t, double series_mean);
RcppExport SEXP potMax_declusterWithTimeCpp(SEXP complete_seriesSEXP, SEXP obs_timesSEXP, SEXP ySEXP, SEXP tSEXP, SEXP series_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type complete_series(complete_seriesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type obs_times(obs_timesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type series_mean(series_meanSEXP);
    __result = Rcpp::wrap(declusterWithTimeCpp(complete_series, obs_times, y, t, series_mean));
    return __result;
END_RCPP
}
// gumbelMaxDistCpp
NumericVector gumbelMaxDistCpp(double mu, double sigma, double Lambda, double integration_constant, int n_mc);
RcppExport SEXP potMax_gumbelMaxDistCpp(SEXP muSEXP, SEXP sigmaSEXP, SEXP LambdaSEXP, SEXP integration_constantSEXP, SEXP n_mcSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< double >::type integration_constant(integration_constantSEXP);
    Rcpp::traits::input_parameter< int >::type n_mc(n_mcSEXP);
    __result = Rcpp::wrap(gumbelMaxDistCpp(mu, sigma, Lambda, integration_constant, n_mc));
    return __result;
END_RCPP
}
// gumbelMaxDistUncertCpp
NumericMatrix gumbelMaxDistUncertCpp(NumericVector mu, NumericVector sigma, NumericVector Lambda, NumericVector integration_constant, int n_mc, int n_boot);
RcppExport SEXP potMax_gumbelMaxDistUncertCpp(SEXP muSEXP, SEXP sigmaSEXP, SEXP LambdaSEXP, SEXP integration_constantSEXP, SEXP n_mcSEXP, SEXP n_bootSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integration_constant(integration_constantSEXP);
    Rcpp::traits::input_parameter< int >::type n_mc(n_mcSEXP);
    Rcpp::traits::input_parameter< int >::type n_boot(n_bootSEXP);
    __result = Rcpp::wrap(gumbelMaxDistUncertCpp(mu, sigma, Lambda, integration_constant, n_mc, n_boot));
    return __result;
END_RCPP
}
// fullMaxDistCpp
NumericVector fullMaxDistCpp(double mu, double sigma, double k, double Lambda, double integration_constant, int n_mc);
RcppExport SEXP potMax_fullMaxDistCpp(SEXP muSEXP, SEXP sigmaSEXP, SEXP kSEXP, SEXP LambdaSEXP, SEXP integration_constantSEXP, SEXP n_mcSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< double >::type integration_constant(integration_constantSEXP);
    Rcpp::traits::input_parameter< int >::type n_mc(n_mcSEXP);
    __result = Rcpp::wrap(fullMaxDistCpp(mu, sigma, k, Lambda, integration_constant, n_mc));
    return __result;
END_RCPP
}
// fullMaxDistUncertCpp
NumericMatrix fullMaxDistUncertCpp(NumericVector mu, NumericVector sigma, NumericVector k, NumericVector Lambda, NumericVector integration_constant, int n_mc, int n_boot);
RcppExport SEXP potMax_fullMaxDistUncertCpp(SEXP muSEXP, SEXP sigmaSEXP, SEXP kSEXP, SEXP LambdaSEXP, SEXP integration_constantSEXP, SEXP n_mcSEXP, SEXP n_bootSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integration_constant(integration_constantSEXP);
    Rcpp::traits::input_parameter< int >::type n_mc(n_mcSEXP);
    Rcpp::traits::input_parameter< int >::type n_boot(n_bootSEXP);
    __result = Rcpp::wrap(fullMaxDistUncertCpp(mu, sigma, k, Lambda, integration_constant, n_mc, n_boot));
    return __result;
END_RCPP
}
