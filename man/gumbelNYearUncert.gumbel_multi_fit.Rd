% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/n_year_vals_multi_thresh_fits.R
\name{gumbelNYearUncert.gumbel_multi_fit}
\alias{gumbelNYearUncert.gumbel_multi_fit}
\title{Uncertainty in Return Values for the Gumbel Model Using Many
  Thresholds}
\usage{
\method{gumbelNYearUncert}{gumbel_multi_fit}(x, declust_obs, N, n_boot,
  progress_tf = TRUE)
}
\arguments{
\item{x}{An S3 object of type \code{gumbel_multi_fit}.}

\item{declust_obs}{(numeric vector) The observed data used by
\code{gumbelMultiFit}.  This will very often be the
\code{$declustered_series} element of an S3 object of class
\code{declustered_series}}

\item{N}{(numeric scalar) The N in N-year return value.  This is a bit of a
misnomer since the unit of time does not have to be years.  The function
can calculate N-second, N-minute, N-hour, etc. return values as well.  In
fact, the unit of time is the same unit of time passed in for the
\code{lt} argument of \code{gumbelMLE}.  Naming the function for the unit
of time year is simply due to my past experince with calculating return
values on the time scale of years.}

\item{n_boot}{(numeric scalar) The number of bootstrap samples}

\item{progress_tf}{(logical scalar) Display a progress bar if TRUE, else not.}
}
\value{
An S3 object of class \code{gumbel_N_year_val_uncert_multi_thresh}
  which is a list of length \code{n_boot} of S3 objects of class
  \code{gumbel_N_year_val_multi_thresh}.
}
\description{
The function produces a bootstrap sample of return values using
  the Gumbel like 2D extremal Poisson process with many possible thresholds
}
\details{
Repeatedly solves the equation

\deqn{\int_{y_N}^\infty\int_0^1\lambda(t, y)dtdy = \frac{1}{N}}

where \eqn{\lambda(t, y)} is given in the documentation for \code{gumbelMLE}
for many thresholds and \code{n_boot} bootstrap replicates of the
unthresholded data inputted to\code{gumbelMultiFit}.
}
\examples{

\dontrun{

complete_series <- -jp1tap1715wind270$value

declustered_obs <- decluster(complete_series)

gumbel_multi_fit <- gumbelMultiFit(x = declustered_obs,
                                   lt = 100,
                                   n_min = 10,
                                   n_max = 50,
                                   weight_scale = 5)

500_second_val_uncert <- gumbelNYearUncert(x = gumbel_multi_fit,
                                           declust_obs = declustered_obs$declustered_series,
                                           N = 500,
                                           n_boot = 200)
}

}
